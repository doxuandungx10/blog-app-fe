import { Subject } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { STORAGE_STRATEGIES } from '../strategies';
import { StorageStrategies } from '../constants/strategy';
import * as i0 from "@angular/core";
export const InvalidStrategyError = 'invalid_strategy';
export class StrategyIndex {
    constructor(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map((strategy, index, arr) => strategy.name)
            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)
            .filter((index) => index !== null)
            .map((index) => strategies[index]);
    }
    static get(name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        let strategy = this.index[name];
        if (!strategy.isAvailable) {
            strategy = this.index[StorageStrategies.InMemory];
        }
        return strategy;
    }
    static set(name, strategy) {
        this.index[name] = strategy;
    }
    static clear(name) {
        if (name !== undefined)
            delete this.index[name];
        else
            this.index = {};
    }
    static isStrategyRegistered(name) {
        return name in this.index;
    }
    static hasRegistredStrategies() {
        return Object.keys(this.index).length > 0;
    }
    getStrategy(name) {
        return StrategyIndex.get(name);
    }
    indexStrategies() {
        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));
    }
    indexStrategy(name, overrideIfExists = false) {
        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex.get(name);
        const strategy = this.strategies.find((strategy) => strategy.name === name);
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    }
    register(name, strategy, overrideIfExists = false) {
        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex.set(name, strategy);
            this.registration$.next(name);
        }
    }
}
StrategyIndex.index = {};
StrategyIndex.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StrategyIndex, deps: [{ token: STORAGE_STRATEGIES, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
StrategyIndex.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StrategyIndex, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StrategyIndex, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [STORAGE_STRATEGIES]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lJbmRleC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC13ZWJzdG9yYWdlL3NyYy9saWIvc2VydmljZXMvc3RyYXRlZ3lJbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7O0FBRXhELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLGtCQUFrQixDQUFDO0FBR3ZELE1BQU0sT0FBTyxhQUFhO0lBS3pCLFlBQThELFVBQWtDO1FBQWxDLGVBQVUsR0FBVixVQUFVLENBQXdCO1FBRnZGLGtCQUFhLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFHdkQsSUFBSSxDQUFDLFVBQVU7WUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRTthQUNwQyxHQUFHLENBQUMsQ0FBQyxRQUE4QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7YUFDbEUsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUM3RSxNQUFNLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7YUFDekMsR0FBRyxDQUFD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QUFFLE1BQU0sRUFBQzs7MEJBTWxCLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NUT1JBR0VfU1RSQVRFR0lFU30gZnJvbSAnLi4vc3RyYXRlZ2llcyc7XG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xuXG5leHBvcnQgY29uc3QgSW52YWxpZFN0cmF0ZWd5RXJyb3IgPSAnaW52YWxpZF9zdHJhdGVneSc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIFN0cmF0ZWd5SW5kZXgge1xuXG5cdHN0YXRpYyBpbmRleDogeyBbbmFtZTogc3RyaW5nXTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gfSA9IHt9O1xuXHRyZWFkb25seSByZWdpc3RyYXRpb24kOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xuXG5cdGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoU1RPUkFHRV9TVFJBVEVHSUVTKSBwcm90ZWN0ZWQgc3RyYXRlZ2llczogU3RvcmFnZVN0cmF0ZWd5PGFueT5bXSkge1xuXHRcdGlmICghc3RyYXRlZ2llcykgc3RyYXRlZ2llcyA9IFtdO1xuXHRcdHRoaXMuc3RyYXRlZ2llcyA9IHN0cmF0ZWdpZXMucmV2ZXJzZSgpXG5cdFx0XHQubWFwKChzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4sIGluZGV4LCBhcnIpID0+IHN0cmF0ZWd5Lm5hbWUpXG5cdFx0XHQubWFwKChuYW1lOiBzdHJpbmcsIGluZGV4LCBhcnIpID0+IGFyci5pbmRleE9mKG5hbWUpID09PSBpbmRleCA/IGluZGV4IDogbnVsbClcblx0XHRcdC5maWx0ZXIoKGluZGV4OiBudW1iZXIpID0+IGluZGV4ICE9PSBudWxsKVxuXHRcdFx0Lm1hcCgoaW5kZXg6IG51bWJlcikgPT4gc3RyYXRlZ2llc1tpbmRleF0pO1xuXHR9XG5cblx0c3RhdGljIGdldChuYW1lOiBzdHJpbmcpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0aWYgKCF0aGlzLmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpKSB0aHJvdyBFcnJvcihJbnZhbGlkU3RyYXRlZ3lFcnJvcik7XG5cdFx0bGV0IHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiA9IHRoaXMuaW5kZXhbbmFtZV07XG5cdFx0aWYgKCFzdHJhdGVneS5pc0F2YWlsYWJsZSkge1xuXHRcdFx0c3RyYXRlZ3kgPSB0aGlzLmluZGV4W1N0b3JhZ2VTdHJhdGVnaWVzLkluTWVtb3J5XTtcblx0XHR9XG5cdFx0cmV0dXJuIHN0cmF0ZWd5O1xuXHR9XG5cblx0c3RhdGljIHNldChuYW1lOiBzdHJpbmcsIHN0cmF0ZWd5KTogdm9pZCB7XG5cdFx0dGhpcy5pbmRleFtuYW1lXSA9IHN0cmF0ZWd5O1xuXHR9XG5cblx0c3RhdGljIGNsZWFyKG5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSBkZWxldGUgdGhpcy5pbmRleFtuYW1lXTtcblx0XHRlbHNlIHRoaXMuaW5kZXggPSB7fTtcblx0fVxuXG5cdHN0YXRpYyBpc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gbmFtZSBpbiB0aGlzLmluZGV4O1xuXHR9XG5cblx0c3RhdGljIGhhc1JlZ2lzdHJlZFN0cmF0ZWdpZXMoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaW5kZXgpLmxlbmd0aCA+IDA7XG5cdH1cblxuXHRwdWJsaWMgZ2V0U3RyYXRlZ3kobmFtZTogc3RyaW5nKTogU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xuXHRcdHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcblx0fVxuXG5cdHB1YmxpYyBpbmRleFN0cmF0ZWdpZXMoKSB7XG5cdFx0dGhpcy5zdHJhdGVnaWVzLmZvckVhY2goKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PikgPT4gdGhpcy5yZWdpc3RlcihzdHJhdGVneS5uYW1lLCBzdHJhdGVneSkpO1xuXHR9XG5cblx0cHVibGljIGluZGV4U3RyYXRlZ3kobmFtZTogc3RyaW5nLCBvdmVycmlkZUlmRXhpc3RzOiBib29sZWFuID0gZmFsc2UpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdFx0aWYgKFN0cmF0ZWd5SW5kZXguaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZSkgJiYgIW92ZXJyaWRlSWZFeGlzdHMpIHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcblx0XHRjb25zdCBzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gPSB0aGlzLnN0cmF0ZWdpZXMuZmluZCgoc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+KSA9PiBzdHJhdGVneS5uYW1lID09PSBuYW1lKTtcblx0XHRpZiAoIXN0cmF0ZWd5KSB0aHJvdyBuZXcgRXJyb3IoSW52YWxpZFN0cmF0ZWd5RXJyb3IpO1xuXHRcdHRoaXMucmVnaXN0ZXIobmFtZSwgc3RyYXRlZ3ksIG92ZXJyaWRlSWZFeGlzdHMpO1xuXHRcdHJldHVybiBzdHJhdGVneTtcblx0fVxuXG5cdHB1YmxpYyByZWdpc3RlcihuYW1lOiBzdHJpbmcsIHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55Piwgb3ZlcnJpZGVJZkV4aXN0czogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0aWYgKCFTdHJhdGVneUluZGV4LmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpIHx8IG92ZXJyaWRlSWZFeGlzdHMpIHtcblx0XHRcdFN0cmF0ZWd5SW5kZXguc2V0KG5hbWUsIHN0cmF0ZWd5KTtcblx0XHRcdHRoaXMucmVnaXN0cmF0aW9uJC5uZXh0KG5hbWUpO1xuXHRcdH1cblx0fVxuXG59XG5cbiJdfQ==