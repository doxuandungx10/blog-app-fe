import { APP_INITIALIZER, Inject, InjectionToken, NgModule, Optional } from '@angular/core';
import { LocalStorageProvider, SessionStorageProvider } from './core/nativeStorage';
import { Services } from './services/index';
import { Strategies } from './strategies/index';
import { StrategyIndex } from './services/strategyIndex';
import { StorageKeyManager } from './helpers/storageKeyManager';
import * as i0 from "@angular/core";
import * as i1 from "./services/strategyIndex";
export const LIB_CONFIG = new InjectionToken('ngx_webstorage_config');
export function appInit(index) {
    index.indexStrategies();
    return () => StrategyIndex.index;
}
export class NgxWebstorageModule {
    constructor(index, config) {
        if (config)
            StorageKeyManager.consumeConfiguration(config);
        else
            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');
    }
    static forRoot(config = {}) {
        return {
            ngModule: NgxWebstorageModule,
            providers: [
                {
                    provide: LIB_CONFIG,
                    useValue: config,
                },
                LocalStorageProvider,
                SessionStorageProvider,
                ...Services,
                ...Strategies,
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInit,
                    deps: [StrategyIndex],
                    multi: true
                }
            ]
        };
    }
}
NgxWebstorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxWebstorageModule, deps: [{ token: i1.StrategyIndex }, { token: LIB_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
NgxWebstorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxWebstorageModule });
NgxWebstorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxWebstorageModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxWebstorageModule, decorators: [{
            type: NgModule,
            args: [{}]
        }], ctorParameters: function () { return [{ type: i1.StrategyIndex }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LIB_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXdlYnN0b3JhZ2Uvc3JjL2xpYi9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxzQkFBc0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2xGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRXZELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7QUFFOUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUErQyxJQUFJLGNBQWMsQ0FBNkIsdUJBQXVCLENBQUMsQ0FBQztBQUU5SSxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQW9CO0lBQzNDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7QUFDbEMsQ0FBQztBQUdELE1BQU0sT0FBTyxtQkFBbUI7SUFFL0IsWUFBWSxLQUFvQixFQUFrQyxNQUFrQztRQUNuRyxJQUFJLE1BQU07WUFBRSxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7WUFDdEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxtR0FBbUcsQ0FBQyxDQUFDO0lBQ3pILENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQXFDLEVBQUU7UUFDckQsT0FBTztZQUNOLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsU0FBUyxFQUFFO2dCQUNWO29CQUNDLE9BQU8sRUFBRSxVQUFVO29CQUNuQixRQUFRLEVBQUUsTUFBTTtpQkFDaEI7Z0JBQ0Qsb0JBQW9CO2dCQUNwQixzQkFBc0I7Z0JBQ3RCLEdBQUcsUUFBUTtnQkFDWCxHQUFHLFVBQVU7Z0JBQ2I7b0JBQ0MsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxPQUFPO29CQUNuQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUM7b0JBQ3JCLEtBQUssRUFBRSxJQUFJO2lCQUNYO2FBQ0Q7U0FDRCxDQUFDO0lBQ0gsQ0FBQzs7Z0hBM0JXLG1CQUFtQiwrQ0FFdUIsVUFBVTtpSEFGcEQsbUJBQW1CO2lIQUFuQixtQkFBbUI7MkZBQW5CLG1CQUFtQjtrQkFEL0IsUUFBUTttQkFBQyxFQUFFOzswQkFHd0IsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xvY2FsU3RvcmFnZVByb3ZpZGVyLCBTZXNzaW9uU3RvcmFnZVByb3ZpZGVyfSBmcm9tICcuL2NvcmUvbmF0aXZlU3RvcmFnZSc7XG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuL3NlcnZpY2VzL2luZGV4JztcbmltcG9ydCB7U3RyYXRlZ2llc30gZnJvbSAnLi9zdHJhdGVnaWVzL2luZGV4JztcbmltcG9ydCB7U3RyYXRlZ3lJbmRleH0gZnJvbSAnLi9zZXJ2aWNlcy9zdHJhdGVneUluZGV4JztcbmltcG9ydCB7Tmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb259IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7U3RvcmFnZUtleU1hbmFnZXJ9IGZyb20gJy4vaGVscGVycy9zdG9yYWdlS2V5TWFuYWdlcic7XG5cbmV4cG9ydCBjb25zdCBMSUJfQ09ORklHOiBJbmplY3Rpb25Ub2tlbjxOZ3hXZWJzdG9yYWdlQ29uZmlndXJhdGlvbj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48Tmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb24+KCduZ3hfd2Vic3RvcmFnZV9jb25maWcnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXQoaW5kZXg6IFN0cmF0ZWd5SW5kZXgpIHtcblx0aW5kZXguaW5kZXhTdHJhdGVnaWVzKCk7XG5cdHJldHVybiAoKSA9PiBTdHJhdGVneUluZGV4LmluZGV4O1xufVxuXG5ATmdNb2R1bGUoe30pXG5leHBvcnQgY2xhc3MgTmd4V2Vic3RvcmFnZU1vZHVsZSB7XG5cblx0Y29uc3RydWN0b3IoaW5kZXg6IFN0cmF0ZWd5SW5kZXgsIEBPcHRpb25hbCgpIEBJbmplY3QoTElCX0NPTkZJRykgY29uZmlnOiBOZ3hXZWJzdG9yYWdlQ29uZmlndXJhdGlvbikge1xuXHRcdGlmIChjb25maWcpIFN0b3JhZ2VLZXlNYW5hZ2VyLmNvbnN1bWVDb25maWd1cmF0aW9uKGNvbmZpZyk7XG5cdFx0ZWxzZSBjb25zb2xlLmVycm9yKCdOZ3hXZWJzdG9yYWdlIDogUG9zc2libGUgbWlzY29uZmlndXJhdGlvbiAoVGhlIGZvclJvb3QgbWV0aG9kIHVzYWdlIGlzIG1hbmRhdG9yeSBzaW5jZSB0aGUgMy4wLjApJyk7XG5cdH1cblxuXHRzdGF0aWMgZm9yUm9vdChjb25maWc6IE5neFdlYnN0b3JhZ2VDb25maWd1cmF0aW9uID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5neFdlYnN0b3JhZ2VNb2R1bGU+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bmdNb2R1bGU6IE5neFdlYnN0b3JhZ2VNb2R1bGUsXG5cdFx0XHRwcm92aWRlcnM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHByb3ZpZGU6IExJQl9DT05GSUcsXG5cdFx0XHRcdFx0dXNlVmFsdWU6IGNvbmZpZyxcblx0XHRcdFx0fSxcblx0XHRcdFx0TG9jYWxTdG9yYWdlUHJvdmlkZXIsXG5cdFx0XHRcdFNlc3Npb25TdG9yYWdlUHJvdmlkZXIsXG5cdFx0XHRcdC4uLlNlcnZpY2VzLFxuXHRcdFx0XHQuLi5TdHJhdGVnaWVzLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuXHRcdFx0XHRcdHVzZUZhY3Rvcnk6IGFwcEluaXQsXG5cdFx0XHRcdFx0ZGVwczogW1N0cmF0ZWd5SW5kZXhdLFxuXHRcdFx0XHRcdG11bHRpOiB0cnVlXG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9O1xuXHR9XG5cbn1cbiJdfQ==